name: Deploy to AWS EC2
on:
  push:
    branches: [ main ]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Build with Maven
      run: mvn -B package --file app/pom.xml
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, Tag, and Push to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cloudlite-webapp
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ec2-user
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cloudlite-webapp
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 400 key.pem
        
        # SSH into the EC2 instance and run the deployment commands
        ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST << EOF
          # Output the ECR Registry URL for debugging
          echo "ECR Registry: $ECR_REGISTRY"

          # Login to AWS ECR using the authentication token (AWS CLI v2 command)
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_REGISTRY

          # Pull the Docker image from ECR
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Stop the existing container (replace with container name or ID if needed)
          CONTAINER_ID=\$(docker ps -q --filter "ancestor=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG")
          if [ -n "\$CONTAINER_ID" ]; then
            docker stop \$CONTAINER_ID || true
          fi

          # Run the new Docker container
          docker run -d -p 80:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        EOF
